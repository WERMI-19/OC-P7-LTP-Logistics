public with sharing class OrderRulesService { public static final Integer MIN_ITEMS_PRO = 5; public static final Integer MIN_ITEMS_PART = 3; public static void validateMinimumItems(List<Order> orders){ if(orders==null||orders.isEmpty()) return; Set<Id> orderIds = new Set<Id>(); Set<Id> accountIds = new Set<Id>(); for(Order o: orders){ orderIds.add(o.Id); if(o.AccountId!=null) accountIds.add(o.AccountId);} Map<Id,Integer> counts = OrderItemSelector.countByOrder(orderIds); Map<Id,Account> accMap = (accountIds.isEmpty()) ? new Map<Id,Account>() : new Map<Id,Account>([SELECT Id, Name, CustomerType__c FROM Account WHERE Id IN :accountIds]); for(Order o: orders){ if(o.Status==null) continue; if(o.Status.equalsIgnoreCase('Activated')){ Account a = (o.AccountId!=null)? accMap.get(o.AccountId) : null; String custType = (a!=null)? String.valueOf(a.CustomerType__c) : null; Integer minItems = (custType == 'PRO') ? MIN_ITEMS_PRO : MIN_ITEMS_PART; Integer have = counts.get(o.Id); have = (have==null)?0:have; if(have < minItems){ o.addError('Un ordre doit contenir au moins ' + minItems + ' produit(s) pour être activé (Type client = ' + (custType==null?'N/A':custType) + ', trouvés = ' + have + ').'); } } } } }