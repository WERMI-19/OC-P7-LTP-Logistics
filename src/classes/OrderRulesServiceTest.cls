@IsTest private class OrderRulesServiceTest { @IsTest static void validate_minimum_items_rules(){ Pricebook2 pb = LtpTestDataFactory.ensureStdPricebook(); Account pro = LtpTestDataFactory.makeAccount('ACME PRO','PRO'); Account part = LtpTestDataFactory.makeAccount('Jane PART','PARTICULIER'); Order o1 = LtpTestDataFactory.makeOrder(pro, pb); Order o2 = LtpTestDataFactory.makeOrder(part, pb); o1.Status='Activated'; o2.Status='Activated'; Test.startTest(); Boolean threw=false; try{ update new List<Order>{ o1, o2 }; } catch(DmlException e){ threw=true; } Test.stopTest(); System.assert(threw, 'L\'activation sans items devait lever une erreur.'); Product2 dummy = new Product2(Name='Dummy', IsActive=true); insert dummy; PricebookEntry pbe = new PricebookEntry(Pricebook2Id=pb.Id, Product2Id=dummy.Id, UnitPrice=10, IsActive=true); insert pbe; for(Integer i=0;i<5;i++) LtpTestDataFactory.addItem(o1,pbe,1); for(Integer j=0;j<3;j++) LtpTestDataFactory.addItem(o2,pbe,1); o1 = [SELECT Id, Status FROM Order WHERE Id=:o1.Id]; o2 = [SELECT Id, Status FROM Order WHERE Id=:o2.Id]; o1.Status='Activated'; o2.Status='Activated'; Test.startTest(); update new List<Order>{ o1, o2 }; Test.stopTest(); } }