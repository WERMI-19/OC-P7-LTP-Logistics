public with sharing class TransportOptionService { public class TransportOptionDTO { @AuraEnabled public Id carrierId; @AuraEnabled public String carrierName; @AuraEnabled public String serviceLevel; @AuraEnabled public Decimal price; @AuraEnabled public Integer leadTimeDays; @AuraEnabled public String zoneCode; public TransportOptionDTO init(PricebookEntry pbe){ this.carrierId = pbe.Product2.Carrier__c; this.carrierName = (pbe.Product2.Carrier__r!=null)? pbe.Product2.Carrier__r.Name : null; this.serviceLevel = String.valueOf(pbe.Product2.ServiceLevel__c); this.price = pbe.UnitPrice; this.leadTimeDays = (pbe.get('LeadTimeDays__c')==null)? null : (Integer)pbe.get('LeadTimeDays__c'); this.zoneCode = (String)pbe.get('ZoneCode__c'); return this; } } public class OptionsResponse { @AuraEnabled public List<TransportOptionDTO> compatible; @AuraEnabled public TransportOptionDTO fastest; @AuraEnabled public TransportOptionDTO cheapest; } public static OptionsResponse computeOptions(String zoneCodeOpt){ List<PricebookEntry> entries = PricebookEntrySelector.listActiveByZone(zoneCodeOpt); List<TransportOptionDTO> dtos = new List<TransportOptionDTO>(); for(PricebookEntry pbe: entries){ if(pbe.Product2==null || pbe.Product2.Carrier__c==null) continue; dtos.add(new TransportOptionDTO().init(pbe)); } OptionsResponse res = new OptionsResponse(); res.compatible = dtos; TransportOptionDTO fastest = null, cheapest = null; for(TransportOptionDTO d: dtos){ if(d.leadTimeDays!=null && (fastest==null || d.leadTimeDays < fastest.leadTimeDays)) fastest = d; if(d.price!=null && (cheapest==null || d.price < cheapest.price)) cheapest = d; } res.fastest = fastest; res.cheapest = cheapest; return res; } }